#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef BOOL_H
#define BOOL_H
typedef int bool;
enum {false, true};
#endif

/* this header file outlines all of the required functions for your linked list
   and the struct.  you may, of course, add any functions you wish.  This is the minimum set */

/*define your struct here */
struct Time {

  int hours;
  int minutes;
  int seconds;

};

struct Patron {

  bool Movie;
  bool Snack;
  char * ID;
  int TimeInLine;
  struct Patron * next;

};



/*fix this typedef so that it refers properly to your struct*/
typedef struct Patron  Patron;

typedef struct Time Time;

typedef Patron * ListHeadPtr;


/*********************
REQUIRED
Linked List functions
*************************/


/*This function returns true if the list is empty and false in all other cases.  
  The function does not change the list in any way */
bool isEmpty(ListHeadPtr theList);

/*This function adds the node sent in as a parameter to the front of the list that
  is given as a parameter.  The function returns the new head of the list.  */
ListHeadPtr addToFront(ListHeadPtr theList, Patron * toBeAdded);

/*This function removes the first item from the given list,  sets the next pointer of that item to NULL
  and returns a pointer to the new head of the list (the item that was the second item*/
ListHeadPtr removeFromFront(ListHeadPtr theList);

/*This function adds the node sent as a parameter to the back of the list sent in as a parameter.
  It returns a pointer to the head of the list */
ListHeadPtr addToBack(ListHeadPtr  theList, Patron * toBeAdded);

/*This function removes the last item from the list and returns a pointer
  to the head of the list. The function sets the next pointer of the new last 
item to NULL and it sets the next pointer of the removed item to NULL */
ListHeadPtr removeFromBack(ListHeadPtr  theList);

/*This function returns a pointer to the last item in the linked list that is
  given as a parameter.  The function does not change the list in any way */
Patron * getBack(ListHeadPtr theList);

/*this function must print the patron ID for each patron in the list to a string beginning with 
the front of the list. The 
Patron Ids must be printed one per line with a newline immediately following the id.
The function should return the string */
char * printList(ListHeadPtr  theList);

/*this function should free all the memory for the list, except possibly the head pointer
  which will need to be freed separately */
void destroyPatronList(ListHeadPtr theList); 


/***********
REQUIRED
Patron functions
************/

/*This list must take in four parameters and return a pointer to 
  a patron struct*/
Patron * createPatron(char * id, bool movie, bool snack, int time);

/*This function must return a pointer to the ID of the Patron.  It should
  not allocate extra memory */
char * getID(Patron * thePatron);

/*This function should return the amount of time that a patron takes
  to purchase items */
int getTime(Patron * thePatron);

/*this function should return a boolean indicating whether or not the Patron
  is attending the movie */
bool getMovie(Patron * thePatron);

/*this function should return a boolean indicating whether or not the Patron
  is purchasing a snack */
bool getSnack(Patron * thePatron);

/*this function should free any memory allocated to the patron and 
should set all of the non-dynamic variables to a default value.  The pointer
to the patron will have to be freed separately */
void destroyPatron(Patron * thePatron);


/*This function is for testing purposes only and doesn't belong in a linked list 
implementation.  Please include it so we can use it to test your software.  It should
return the pointer to the 'next' item in the linked list, given a patron pointer as a parameter */
Patron * getNextPatron(Patron * thePatron);


/* returns a nicely formatted char * of a patron in form (ID, movie = t/f, snack = t/f, hh:mm:ss) */
char * printPatron(Patron * thePatron);


/*****************
FILE SHENANIGANS
*****************/

/*opens the file with the passed filepath + filename, all in one char * */
FILE * openLine(char * filename);

/* writes the max, min and avg time in line of all patrons to a file called report.txt to the docs folder of the assignment.
All times are reported in hh:mm:ss format.
The first three lines: Max:maxTimeHere
                       Min:minTimeHere
                       Avg:averageTimeHere
Remaining lines must a list of each patron in the seating line, in the order that the patrons arrived in the line.
Each line contains a single patron-string followd by a newline (no spaces)
Example - 45BAWF:00:15:45 */
bool writeToFile(ListHeadPtr theList);

/*grabs a line from the file */
char * getLine(FILE * fileName);

/*This function will parse a line and get the ID, boolean value for the movie and snack line and 
  the time */
Patron parseLine(char * line, char * delimPtr);


/****************
TIME FUNCTIONS 
****************/

/*compares two times, returning a positive number if the first time is greater, 0 if they are the same
  and a negative number if the second is greater */
int timeComp(Time one, Time two);


/* converts seconds to a time struct */
Time secsToTime(int seconds);

/* converts a time struct to seconds */
int timeToSecs(Time t);

/* adds two times together */
Time addTimes(Time one, Time two);


/* returns a time struct that has a value of -1 seconds to account for patrons with 0 times */
/* also turns the other clocks back a second */
int resetTime();

/* decrement a clock by one second */
int decrementTime(int clock);

/* increment a the time by one second */
int incrementTime(int clock);


/* returns a char of the time sent to the function in format "Current time: hh:mm:ss" */ 
char * printTime(int clock);
